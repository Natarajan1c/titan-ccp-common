// Local Java version setting
sourceCompatibility = "1.11"
targetCompatibility = "1.11"

// Local repositories
repositories {
    maven {
        url 'https://packages.confluent.io/maven/'
    }
}

dependencies {
    // These dependencies is exported to consumers, that is to say found on their compile classpath.
    api 'org.apache.kafka:kafka-streams:2.4.0'

    // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
    implementation ('io.confluent:kafka-streams-avro-serde:5.3.2') {
    	// Kafka client is already included from Kafka Streams in version 2.4.0
		exclude group: 'org.apache.kafka', module: 'kafka-clients' 
  	}
    implementation 'org.slf4j:slf4j-api:1.7.25'

    // Use JUnit test framework   
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
}

// Local sources
sourceSets {
	main {
	    java {
	        srcDir 'src/main/java'
	    }
	}
}

// Local publishing
publishing {
	publications {
	    mavenJava(MavenPublication) {
	    	// Set identity values in gradle.properties
	        artifactId = "${artifcatId}"
	
	        from components.java
	
	        artifact(sourceJar) {
	            classifier = 'sources'
	        }
	        artifact(javadocJar) {
	            classifier = 'javadoc'
	        }
			pom {
				name = 'Titan Control Center - Common Kafka'
				description = 'A common Kafka library for microservices of the Titan Control Center'
				url = 'https://git.industrial-devops.org/titan/ControlCenterPrototype/common'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						name = 'SÃ¶ren Henning'
						email = 'soeren.henning@email.uni-kiel.de'
					}
				}
			    scm {
					url = 'https://git.industrial-devops.org/titan/ControlCenterPrototype/common'
			    }
	        }
	    }
	}
	repositories {
	    maven {
	        url "https://oss.sonatype.org/content/repositories/snapshots/"
	        credentials {
	            username project.hasProperty('sonatypeUsername') ? project.sonatypeUsername : ''
	            password project.hasProperty('sonatypePassword') ? project.sonatypePassword : ''
	        }
	    }
	}
}

// Quality tools configuration
pmd {
  ruleSets = [] // Gradle requires to clean the rule sets first
  ruleSetFiles = files("config/pmd.xml")
  ignoreFailures = false
  toolVersion = "6.7.0"
}

checkstyle {
  configDir = file("config")
  configFile = file("config/checkstyle.xml")
  maxWarnings = 0
  ignoreFailures = false
  toolVersion = "8.12"
}

spotbugs {
  excludeFilter = file("config/spotbugs-exclude-filter.xml")
  reportLevel = "low"
  effort = "max"
  ignoreFailures = false
  toolVersion = '3.1.7'
}

// Per default XML reports for SpotBugs are generated
// Include this to generate HTML reports
tasks.withType(com.github.spotbugs.SpotBugsTask) {
  reports {
    // Either HTML or XML reports can be activated
    html.enabled true
    xml.enabled false
  }
}