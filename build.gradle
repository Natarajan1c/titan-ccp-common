buildscript {
  repositories {
    maven {
      url "https://plugins.gradle.org/m2/"
    }
  }
  dependencies {
    classpath "gradle.plugin.com.github.spotbugs:spotbugs-gradle-plugin:1.6.3"
    classpath "com.commercehub.gradle.plugin:gradle-avro-plugin:0.17.0"
  }
}

apply plugin: 'java-library'
apply plugin: 'maven-publish'
apply plugin: "com.commercehub.gradle.plugin.avro-base"
apply plugin: 'eclipse'


sourceCompatibility = "1.8"
targetCompatibility = "1.8"

allprojects { 
    repositories {
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url 'https://packages.confluent.io/maven/'
        }
    }
}

dependencies {
    // These dependencies is exported to consumers, that is to say found on their compile classpath.
    api 'net.kieker-monitoring:kieker:1.14-SNAPSHOT'
    api 'org.apache.kafka:kafka-streams:2.4.0'
    api 'com.datastax.cassandra:cassandra-driver-core:3.4.0'
    api 'org.apache.avro:avro:1.9.1'
    api 'org.apache.commons:commons-configuration2:2.0'


    // These dependencies are used internally, and not exposed to consumers on their own compile classpath.
    implementation 'commons-beanutils:commons-beanutils:1.9.2' // necessary for commons-configuration2
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.google.guava:guava:24.1-jre'
    implementation 'org.slf4j:slf4j-api:1.7.25'
    implementation 'io.confluent:kafka-streams-avro-serde:5.3.1'

    // Use JUnit test framework
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testImplementation 'com.github.stefanbirkner:system-rules:1.17.0'
    testImplementation 'org.cassandraunit:cassandra-unit-shaded:3.3.0.2'
}

sourceSets {
	main {
	    java {
	        srcDir 'src/main/java'
	        srcDir 'src-gen/main/java'
	    }
	}
}

task sourceJar(type: Jar) {
    classifier "sources"
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier "javadoc"
    from javadoc.destinationDir
}

artifacts {
    archives jar
    archives sourceJar
    archives javadocJar
}

avro {
    fieldVisibility = "PRIVATE"
    createSetters = false
}

task("generateAvroProtocol", type: com.commercehub.gradle.plugin.avro.GenerateAvroProtocolTask) {
    group 'Generate Sources'
    source file("src/main/avro")
    include("**/*.avdl")
    outputDir = file("build/generated-avro-main-avpr")
}

task("generateAvroSchema", type: com.commercehub.gradle.plugin.avro.GenerateAvroSchemaTask) {
    group 'Generate Sources'
    dependsOn generateAvroProtocol
    source file("src/main/avro")
    source file("build/generated-avro-main-avpr")
    include("**/*.avpr")
    outputDir = file("src-gen/main/avro")
}

task ("generateAvroJava", type: com.commercehub.gradle.plugin.avro.GenerateAvroJavaTask) {
    group 'Generate Sources'
    dependsOn generateAvroSchema
    source file("src-gen/main/avro")
    outputDir = file("src-gen/main/java")
}

publishing {
	publications {
	    mavenJava(MavenPublication) {
	        groupId 'org.industrial-devops'
	        artifactId 'titan-ccp-common'
	        version '0.0.2-SNAPSHOT'

	        from components.java

	        artifact(sourceJar) {
	            classifier = 'sources'
	        }
	        artifact(javadocJar) {
	            classifier = 'javadoc'
	        }
			pom {
				name = 'Titan Control Center Prototype - Common'
				description = 'A common library for microservices of the Titan Control Center Prototype'
				url = 'https://git.industrial-devops.org/titan/ControlCenterPrototype/common'
				licenses {
					license {
						name = 'The Apache License, Version 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				developers {
					developer {
						name = 'SÃ¶ren Henning'
						email = 'soeren.henning@email.uni-kiel.de'
					}
				}
			    scm {
					url = 'https://git.industrial-devops.org/titan/ControlCenterPrototype/common'
			    }
	        }
	    }
	}
	repositories {
	    maven {
	        url "https://oss.sonatype.org/content/repositories/snapshots/"
	        credentials {
	            username project.hasProperty('sonatypeUsername') ? project.sonatypeUsername : ''
	            password project.hasProperty('sonatypePassword') ? project.sonatypePassword : ''
	        }
	    }
	}
}

eclipse {
    classpath {
       downloadSources=true
       downloadJavadoc=true
    }
}
